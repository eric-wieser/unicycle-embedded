syntax = "proto3";

import "policies.proto";

// Messages from PC to robot:
message Go {
  int32 steps = 1;
}
message Stop {
}
message GetLogs {
}
message CalibrateGyro {
}
message GetAccelerometer {
}
message SetMotors {
  float wheel = 1;
  float turntable = 2;
}


message Controller {
  Policy wheel = 1;
  Policy turntable = 2;
}

message PCMessage {
  oneof msg {
    Go go = 1;
    Stop stop = 2;
    Controller controller = 3;
    GetLogs get_logs = 4;
    CalibrateGyro calibrate = 5;
    GetAccelerometer get_acc = 6;
    SetMotors set_motors = 7;
  }
}

// Messages from robot to PC
message LogEntry {
  float droll          =  1; // roll angular velocity
  float dyaw           =  2; // yaw angular velocity
  float dAngleW        =  3; // Wheel angular velocity
  float dpitch         =  4; // pitch angular velocity
  float dAngleTT       =  5; // turn table angular velocity
  float xOrigin        =  6; // x position of origin in self centered coord
  float yOrigin        =  7; // y position of origin in self centered coord
  float roll           =  8; // roll angle
  float yaw            =  9; // yaw angle
  float pitch          = 10; // pitch angle
  //float dx           = 11; // x velocity
  //float dy           = 12; // y velocity
  //float dxOrigin     = 13; // x velocity of origin in self centered coord
  //float dyOrigin     = 14; // y velocity of origin in self centered coord
  float x              = 15; // x position
  float y              = 16; // y position
  float AngleW         = 17; // wheel angle
  float AngleTT        = 18; // turn table angle
  float TurntableInput = 19; // control torque for turntable (here we record what is demanded, not what provided due to duty maximum of 1)
  float WheelInput     = 20; // control torque for wheel (here we record what is demanded, not what provided due to duty maximum of 1)

  // We may need the accelerations for calibrating the start measurements
  float ddx = 21;
  float ddy = 22;
  float ddz = 23;
};

message LogBundle {
  repeated LogEntry entry = 1;
  // Controller controller = 2;
}

enum DebugLevel {
  DEBUG = 0;
  INFO = 1;
  WARN = 2;
  ERROR = 3;
}

message DebugMessage {
  string s = 1;
  DebugLevel level = 2;
}

message RobotMessage {
  oneof msg {
    LogBundle log_bundle = 1;
    DebugMessage debug = 2;
    LogEntry single_log = 3;
  }
}
